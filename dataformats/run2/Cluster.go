// automatically generated by the FlatBuffers compiler, do not modify

package run2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Cluster struct {
	_tab flatbuffers.Table
}

func GetRootAsCluster(buf []byte, offset flatbuffers.UOffsetT) *Cluster {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cluster{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Cluster) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cluster) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Cluster) Pre(obj *PreCluster) *PreCluster {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(PreCluster)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Cluster) Pos(obj *ClusterPos) *ClusterPos {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ClusterPos)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ClusterStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ClusterAddPre(builder *flatbuffers.Builder, pre flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pre), 0)
}
func ClusterAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(pos), 0)
}
func ClusterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
